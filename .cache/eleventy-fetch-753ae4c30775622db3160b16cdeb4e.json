{"data":[{"id":2,"documentId":"li1exslams5stdrg0r60mcyp","deliverable1":"---\nlayout: layouts/default.hbs\ntitle: Lab Write Up\n---\n\n# {{ title }}\n\n## Write Up\nMy experience using static site generation has been interesting. I had no idea it existed until this semester and it definately has been eye opening.\nIts extremely convenient and easy to use and takes away the need of coding raw html. \nOne of the things I found useful was how I can completely focus on  the actual content on the page and the generator will take care of of creating the html files for me. I hated manually writing and maintaining \nmultiple html pages. It was way too stressful and annoying especially if the prjects in particular are very big.\nI enjoyed learning to work with nunjucks. Reusing layouts and components over multiple html pages are alot easier now than it used to be. \nIts just overall objectively better for updating and maintaining consistency throughout the project.\nI wont say that there wasn't any challenges because getting familiar with 11ty was annoying simply because it was new to me. Learning how to configure it took some time but the learning curve was managable. Overall using SSG has made building websites \na more structured and enjoyable process.\n\n### Template Engines Comparison\n\nHere are three template engines I researched:\n\n1. **Nunjucks**\n   - **Pros**: \n     - Has great features like loops, conditionals, and filters\n     - Has reusable components like headers and footers\n   - **Cons**: \n     - The syntax is complex\n     - Harder to setup for existing projects that dont use Node.js\n\n2. **Pug**\n   - **Pros**: \n     - The ability to use conditional logic, loops and variables directly in the template.\n     - Works seamlessly with javascript because its tightly integrated with Node.js.\n   - **Cons**:\n     - Hard to learn for beginners because the syntax is index based.\n     - Less learning resources are available because its less popular than major engines like Handlebars or Nunjucks.\n\n3. **Mustache**\n   - **Pros**: \n     - its a logicless engine so the syntax is extremely simple and clean. Its very beginner friendly.\n     - It can be used with a wide veriety of programming languages like Python, JavaScript and Ruby.\n   - **Cons**:\n     - Its not really flexible because it can't handle complex logic.\n     - It Lacks features like reusable components or layouts.\n\n#### Choice of Template Engine\nFor this project, I chose **Nunjucks** because Its easy to use and I have already been studying it. I'd rather use something I understand than something I dont understand. It will also be better for my future projects because of how versatile it is.\nMy other projects will be large and I would rather use a templating engine that has similar syntax to traditional html because that's what I have been learning for the past 3 years of my life.\n\n### SSG Alternatives\n\nApart from **11ty**, some other popular Static Site Generators include:\n\n- **Gatsby**\n  - **Pros**: \n     - Gatsby can handle both static and dynamic content making it good for all manner of web applications.\n     - It has lots of plugins and starters.\n   - **Cons**:\n     - You need to learn React and GraphQL which may be overwhelming.\n     - The deployment is complex because you need knowledge of hosting solutions like Netlify or Vercel.\n\n- **Jekyll**\n  - **Pros**: \n     - Its the default engine for github pages which makes github deployments easier.\n     - Jekyll has a lot of plugins and themes available to extend functionality.\n   - **Cons**:\n     - Jekylls build times increase significantly with larger sites.\n     - Jekyll is old. The syntax of other SSG alternatives are more intuitive.\n\n\n- **Hugo**\n  - **Pros**: \n     - Hugo is very fast. Its one of the fastest static site generators.\n     - Hugo has excellent markdown support.\n   - **Cons**:\n     - Hugos plugin ecosystem is not as good as jekyll or Gatsby.\n     - Hugo isnt built on javascript so it wont be familiar with developers.\n\n### 11ty Configuration\n\nIn this project, I’m using the following **11ty** configuration:\n\n- **addPassthroughCopy**: I'm using passthrough copy to keep the source files organized in the src directory while still making them available in the final output.\n- **eleventy.before**: Im using this configuration to do tasks before the build happens. Before the build happens the src files are separated from the generated output.\n\nAdditionally, **11ty** provides settings for **Ignoring Templating Files**. So in the future I might use eleventyConfig.ignores to ignore certain files or directories during the build process. There will be many files that aren't relevant  to the site output so this would definately be useful. \n\n\n\n### Front Matter\n\nFront matter is the metadata included at the top of a file, written in Markdown, TOML, or JSON. Front matter usually has information about the document like the title and date or any other relevant data. Its related to the web because for example\nin static site generators like Eleventy, front matter allows you to define how the content should be processed and rendered. \n\nHere’s an example:\n\n```yaml\n---\nlayout: layouts/default.mustache\ntitle: Lab Write Up\n---\n","instructions":"---\nlayout: layouts/default.hbs\ntitle: Lab Write-Up Instructions\n---\n\n# {{ title }}\n\n## Instructions\n\n- Do a lab write-up documenting your experience using Static Site Generation (SSG).\n- The submission will be a markdown document of approximate length 1-2 pages (300-600 words), although there are no marks allocated for number of words.\n- Read about at least 3 different template engines. List what you think might be pros and cons of each. Choose one to use in your assignment. Explain your choice.\n- Are there other SSG applications (other than 11ty)? Which ones are popular? What do you think the pros and cons of some of the other options might be?\n- Read the configuration section of the 11ty documentation. Which settings are we using and why? Which settings exist that might be worth looking into?\n- What is front matter? How does it relate to the web?\n","mainpage":"---\nlayout: layouts/default.hbs\ntitle: My Rad Site\n---\n\n# {{ title }}","tac":"---\nlayout: layouts/default.hbs\ntitle: Terms and Conditions\n---\n\n# Terms and Conditions\n\n## Introduction\n\nThese terms and conditions govern your use of our website and the services we offer. By accessing or using our website, you agree to comply with and be bound by these terms.\n\n## Acceptance of Terms\n\nBy using our website, you confirm that you have read, understood, and agreed to these terms and conditions. If you do not agree to these terms, you must not use our website.\n\n## Changes to Terms\n\nWe reserve the right to modify these terms at any time. Any changes will be effective immediately upon posting on this page. It is your responsibility to review these terms periodically for updates.\n\n## User Responsibilities\n\n- You must use our website in compliance with all applicable laws and regulations.\n- You are responsible for maintaining the confidentiality of your account information and password.\n- You agree to notify us immediately of any unauthorized use of your account or any other breach of security.\n\n## Intellectual Property\n\nAll content on this website, including text, graphics, logos, and images, is the property of NJINC or its content suppliers and is protected by intellectual property laws. You may not use, reproduce, or distribute any content without our prior written permission.\n\n## Limitation of Liability\n\nIn no event shall NJINC be liable for any indirect, incidental, or consequential damages arising from your use of our website or services.\n\n## Governing Law\n\nThese terms and conditions are governed by and construed in accordance with the laws of Ontario. Any disputes arising under these terms shall be subject to the exclusive jurisdiction of the courts of Ontario.\n\n## Contact Information\n\nIf you have any questions about these terms and conditions, please contact us at:\n\nNjmais@outlook.com\n\n---\n\nBy using our website, you acknowledge that you have read and understood these terms and conditions and agree to be bound by them.\n","documentation":"---\nlayout: layouts/default.hbs\ntitle: My Rad Website\n---\n# 11ty Website\n\n## Introduction\nThis project uses the static site generator 11ty and the templating engine mustache to generate html pages.\n\n## Installation\nIn order for this to run you need to install node.js 11ty and mustache.\n\n\n","lab2":"---\nlayout: layouts/default.hbs\ntitle: My Rad Website\n---\n\n# Headless CMS Systems\n\nIn this post, I'll write about five popular headless CMS systems: **Strapi**, **Contentful**, **Sanity**, **Prismic**, and **Ghost**.\n\n## 1. Strapi\n\nStrapi is a CMS that provides a flexible API for content management. It allows you to create custom content types and integrates easily with lots of front-end frameworks. You can use it to manage content in a headless setup, and it supports RESTful and GraphQL APIs. Setting it up in Visual Studio Code is very easy. The documentation is really straightforward.\n\n### Key Features of Strapi:\n- Open-source and customizable\n- Supports both RESTful and GraphQL APIs\n- Admin panel for content management\n- Extensible with plugins\n\n## 2. Contentful\n\nContentful is a cloud-based headless CMS that also offers a flexible API for managing content. It’s known for its content modeling flexibility and the ability to deliver content across multiple channels. Contentful has a user-friendly interface for content creators and it integrates seamlessly with many different development frameworks. There is no setup required like there is in Strapi. All you have to do is make an account on their site and you can go create content from there.\n\n### Key Features of Contentful:\n- Flexible content modeling\n- RESTful and GraphQL APIs\n- Powerful user roles and permissions\n- Integrates with many front-end frameworks\n\n## 3. Sanity\n\nSanity is a headless CMS that uses structured content to endlessly reuse content across any channel. It's highly customizable and developer-friendly. It offers real-time collaboration and built-in APIs to serve content.\n\n### Key Features of Sanity:\n- Real-time content editing\n- Customizable content models\n- Built-in APIs and integrations\n- Developer-friendly \n\n## 4. Prismic\n\nPrismic is like Contentful. It's a cloud-based headless CMS mostly meant for marketers. It has a simple interface and an API to make delivering content to websites, apps, and other digital experiences easy and efficient.\n\n### Key Features of Prismic:\n- Content versioning and scheduling\n- Easy-to-use interface\n- RESTful API for content delivery\n- Integration with web development frameworks\n\n## 5. Ghost\n\nGhost is an open-source CMS and publishing platform, mainly meant for professional publishing. It’s a good option for blogging and content-heavy websites. It provides a clean, minimalistic experience for content creators and offers flexibility for developers.\n\n### Key Features of Ghost:\n- Optimized for publishing and blogging\n- Open-source and self-hosted\n- Built-in SEO tools\n- Flexible APIs for custom integrations\n\n---\n\nThese five headless CMS systems are great, but I chose Contentful and Strapi. I like both Contentful and Strapi because they are easy to use. Strapi is useful because you don't even need to create a file to call the API. Everything is done automatically. When you install Strapi, it creates a whole new folder, and all the data you update in the site gets updated in that folder. This is very convenient. I chose Contentful as well because it's extremely easy and fast to use and requires no setup at all. The disadvantage is that you have to call the API and create the files yourself. My favorite CMS is Strapi, and I will be using it for the assignment.\n\n---\n\n### Strapi Screenshot 1:\n\n---\n\nIn order to use Strapi, the first thing I needed to do was install it on VS Code. The installation basically creates a folder that will automatically be updated when you change any collection you have on the Strapi site.\n\n---\n\n<img src=\"/Screenshots/strapi4.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n\n---\n\n### Strapi Screenshot 2:\n\n---\n\nThis is the collection that I mad called clients. Clients has 4 attributes. The 4 attributes are Name, email, Phone and password. I plan to use this for a login page later.\n\n---\n\n<img src=\"/Screenshots/strapi3.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n\n---\n\n### Strapi Screenshot 3:\n\n---\n\nI made the api private and created an api key. I later used this in curl to get the raw json data. \n\n---\n\n<img src=\"/Screenshots/strapi2.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Strapi Screenshot 4:\n\n---\n\nHeres the curl command I used to get the json data from the api key. \n\n---\n\n<img src=\"/Screenshots/strapi1.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Contentful Screenshot 1:\n\n---\n\nI didnt struggle to use contentful at all because its incredibly easy. The first step was to create a content type. I created clients.\n\n---\n\n<img src=\"/Screenshots/contentful2.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Contentful Screenshot 2:\n\n---\n\nI then created the first client which is me \n\n---\n\n<img src=\"/Screenshots/contentful1.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Contentful Screenshot 3:\n\n---\n\nIn order for me to make api requests in 11ty I needed to use the contentful sdk. I needed to do a npm install.\n\n---\n\n<img src=\"/Screenshots/contentful4.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Contentful Screenshot 4:\n\n---\n\nI then needed to create an env file with my id the environment and the access token. This keeps my credentials secure.\n\n---\n\n<img src=\"/Screenshots/contentful5.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">\n\n---\n\n### Contentful Screenshot 5:\n\n---\n\nThe last step was copying the js file contentful gave me and implimenting it in my folder. This file stores te contentful data globally.\n\n---\n\n<img src=\"/Screenshots/contentful6.png\" alt=\"Responsive Image\" style=\"width: 50%; height: auto;\">","createdAt":"2024-11-15T23:11:33.661Z","updatedAt":"2024-11-15T23:11:35.756Z","publishedAt":"2024-11-15T23:11:35.760Z"}],"meta":{"pagination":{"page":1,"pageSize":25,"pageCount":1,"total":1}}}